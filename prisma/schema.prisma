// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Stock {
  StockIN
  StockOUT
}

enum Inventory {
  None
  Product
  Service
}

enum Location {
  NONE
  Location1
  Location2
}

enum Role {
  Staff
  Admin
  Manager
  Veterinarian
}

//-------------------------------------------------------DATABASE SUB MODELS END-------------------------------------------------------//
// Main Models to be created below:

// model Organisation {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String  @db.ObjectId
//   name         String?
//   gstinNo      String?
//   contact      String?
//   companyEmail String?
//   address      String?
//   state        String?
//   pincode      String?
//   description  String?
//   logoImg      String?
//   members      User?   @relation(fields: [userId], references: [id])
//   @@map("organisation")
// }

model Organization {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  orgName      String      @unique
  orgEmail     String
  gstNo        String
  address      String
  state        String
  pincode      String
  description  String
  phoneNo      String
  adminUsers   User[]      @relation(fields: [adminUserIds], references: [id])
  adminUserIds String[]    @default([]) @db.ObjectId
  OrgBranch    OrgBranch[]
}

model OrgBranch {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  branchName        String
  org               Organization        @relation(fields: [orgId], references: [id])
  orgId             String              @db.ObjectId
  OrgBranchUserRole OrgBranchUserRole[]
}

model OrgBranchUserRole {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orgBranch   OrgBranch @relation(fields: [orgBranchId], references: [id])
  orgBranchId String    @db.ObjectId
  User        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  Role        Role
}

model User {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String              @unique
  phoneNo              String
  altPhoneNo           String?
  hashedPassword       String
  adminOrganizations   Organization[]      @relation(fields: [adminOrganizationIds], references: [id])
  adminOrganizationIds String[]            @default([]) @db.ObjectId // admin of which organizations
  OrgBranchUserRole    OrgBranchUserRole[]

  @@map("user")
}



// ------------------------------------------- INVENTORY SUB MODELS START----------------------------------------------------
model Products {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  itemName      String?
  defaultUnit   String?
  hsnCode       String?
  tax           String?
  category      String?
  description   String?
  providers     String[]
  totalQuantity Int?
  minStock      Int?
  maxStock      Int?
  productBatch  ProductBatch[]
  Items         Items[]

  @@map("products")
}

model ProductBatch {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  distributors      String[]
  quantity          Int?
  productId         String              @db.ObjectId
  batchNumber       String?
  costPrice         Int?
  location          Location            @default(NONE)
  totalCost         Int?
  costPerItem       Int?
  profitMargin      String?
  expiry            DateTime?
  sellingPrice      Int?
  date              DateTime?
  balanceDue        Boolean?
  Items             Items[]
  Inventory         Inventory[]
  product           Products?           @relation(fields: [productId], references: [id])
  InventoryTimeline InventoryTimeline[]

  @@map("productBatch")
}

model Services {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  sacCode           String?
  description       String?
  sellingPrice      String?
  tax               String?
  category          String?
  providers         String[]
  linkProducts      String[]
  serviceCost       Int?
  serviceCharge     Int?
  inventoryEntries  Inventory[]
  InventoryTimeline InventoryTimeline[]

  @@map("services")
}

//------------------------------------------------INVENTORY SUB MODELS END---------------------------------------------------

//-------------------------------------------FINANCE SUB MODELS START--------------------------------------------------
model Sales {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  customer        String
  date            DateTime
  notes           String
  subTotal        Int
  invoiceNo       Int
  dueDate         DateTime
  shipping        Int
  adjustment      Int
  totalCost       Int
  overallDiscount Int
  totalQty        Int
  status          String
  type            String?
  item            Items[]
  financeEntries  FinanceTimeline[]

  @@map("sales")
}

model Purchases {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  distributor          String
  date                 DateTime
  dueDate              DateTime
  returnLastDate       DateTime?
  invoiceNo            String
  purchaseOrderNumber  String?
  distributorInvoiceNo String?
  grnNo                String
  notes                String
  shipping             Int
  adjustment           Int
  totalCost            Int
  totalQty             Int
  status               String
  type                 String?
  item                 Items[]
  financeEntries       FinanceTimeline[]

  @@map("purchases")
}

model Expenses {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  party           String
  date            DateTime
  invoiceNo       String?
  subTotal        Int
  overallDiscount Int
  totalCost       Int?
  totalQty        Int?
  startedOn       DateTime?
  recurringType   String? // this could be either 'week', 'month' or 'year'
  recurringEnd    String?
  dueDate         String
  notes           String
  status          String
  type            String? // this is the params passed in our url telling if the expense is recurring or non-recurring.
  item            Items[]
  financeEntries  FinanceTimeline[]

  @@map("expenses")
}

model Transactions {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  partyName     String?
  subject       String?
  invoiceLink   String?
  receiptNo     String?
  date          DateTime?
  amountPaid    Int
  mode          String?
  moneyChange   String?
  invoiceSource String?
}

model Items {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  taxPercent     Int
  taxAmount      Int
  totalAmount    Int
  reasons        String?
  category       String?
  quantity       Int?
  name           String?
  productId      String?       @db.ObjectId
  products       Products?     @relation(fields: [productId], references: [id])
  salesId        String?       @db.ObjectId
  sale           Sales?        @relation(fields: [salesId], references: [id])
  Purchases      Purchases?    @relation(fields: [purchasesId], references: [id])
  purchasesId    String?       @db.ObjectId
  Expenses       Expenses?     @relation(fields: [expensesId], references: [id])
  expensesId     String?       @db.ObjectId
  ProductBatch   ProductBatch? @relation(fields: [productBatchId], references: [id])
  productBatchId String?       @db.ObjectId

  @@map("items")
}

//------------------------------------------------------FINANCE SUB MODELS END--------------------------------------------------
//-------------------------------------------------------DATABASE SUB MODELS START --------------------------------------------//

model Clients {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  clientName String?
  email      String?
  contact    String?
  address    String?
  city       String?
  pinCode    String?
  patients   Patients[]

  @@map("client")
}

model Patients {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  patientName String?
  clientId    String?   @db.ObjectId
  species     String?
  breed       String?
  dateOfBirth DateTime?
  age         String?
  gender      String?
  isInpatient Boolean?
  clients     Clients?  @relation(fields: [clientId], references: [id])

  @@map("patient")
}

model Distributors {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  distributorName String?
  email           String?
  contact         String?
  gstinNo         String?
  panNo           String?
  address         String?
  city            String?
  pinCode         String?
  
  @@map("distributor")
}

//-------------------------------------------------------DATABASE SUB MODELS END-------------------------------------------------------//
// Main Models to be created below:

// model Organisation {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String  @db.ObjectId
//   name         String?
//   gstinNo      String?
//   contact      String?
//   companyEmail String?
//   address      String?
//   state        String?
//   pincode      String?
//   description  String?
//   logoImg      String?
//   members      User?   @relation(fields: [userId], references: [id])

//   @@map("organisation")
// }



model InventoryTimeline {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  objectId       String?       @db.ObjectId
  inventoryType  Inventory?    @default(None)
  stockChange    Stock?        @default(StockIN)
  invoiceType    String?
  quantityChange Int?
  receiptNo      Int?
  party          String?
  createdAt      DateTime?     @default(now())
  productBatch   ProductBatch? @relation(fields: [objectId], references: [id])
  allServices    Services?     @relation(fields: [objectId], references: [id])

  @@map("inventoryTimeline")
}

model FinanceTimeline {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  salesId     String?    @db.ObjectId
  sale        Sales?     @relation(fields: [salesId], references: [id])
  type        String?
  createdAt   DateTime
  Purchases   Purchases? @relation(fields: [purchasesId], references: [id])
  purchasesId String?    @db.ObjectId
  Expenses    Expenses?  @relation(fields: [expensesId], references: [id])
  expensesId  String?    @db.ObjectId

  @@map("finance")
}
