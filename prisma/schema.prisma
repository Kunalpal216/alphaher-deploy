// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// enum Stock {
//   StockIN
//   StockOUT
// }

enum Location {
  NONE
  Location1
  Location2
}

enum Role {
  Staff
  Admin
  Manager
  Veterinarian
}

//-------------------------------------------------------DATABASE SUB MODELS END-------------------------------------------------------//
// Main Models to be created below:

// model Organisation {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String  @db.ObjectId
//   name         String?
//   gstinNo      String?
//   contact      String?
//   companyEmail String?
//   address      String?
//   state        String?
//   pincode      String?
//   description  String?
//   logoImg      String?
//   members      User?   @relation(fields: [userId], references: [id])
//   @@map("organisation")
// }

model Organization {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  orgName      String      @unique
  orgEmail     String
  gstNo        String
  address      String
  state        String
  pincode      String
  description  String
  phoneNo      String
  adminUsers   User[]      @relation(fields: [adminUserIds], references: [id])
  adminUserIds String[]    @default([]) @db.ObjectId
  orgBranches  OrgBranch[] // doesn't exist in db 1-n
}

model OrgBranch {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  branchName        String
  org               Organization        @relation(fields: [orgId], references: [id])
  orgId             String              @db.ObjectId
  orgBranchUserRoles OrgBranchUserRole[] // doesn't exist in db 1-n
}

model OrgBranchUserRole {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orgBranch   OrgBranch @relation(fields: [orgBranchId], references: [id])
  orgBranchId String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  role        Role
}

model User {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String              @unique
  phoneNo              String
  altPhoneNo           String?
  hashedPassword       String
  adminOrganizations   Organization[]      @relation(fields: [adminOrganizationIds], references: [id])
  adminOrganizationIds String[]            @default([]) @db.ObjectId // admin of which organizations
  OrgBranchUserRole    OrgBranchUserRole[] // doesn't exist in db 1-n
  @@map("user")
}

model Inventory {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  stockChange    String?
  invoiceType    String?
  quantityChange Int?
  receiptNo      Int?
  party          String?
  createdAt      DateTime?    @default(now())
  allProducts    AllProducts? @relation(fields: [allProductsId], references: [id])
  allProductsId  String?      @db.ObjectId
  allServices    AllServices? @relation(fields: [allServicesId], references: [id])
  allServicesId  String?      @db.ObjectId

  @@map("inventory")
}

model Finance {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  salesId     String?    @db.ObjectId
  sale        Sales?     @relation(fields: [salesId], references: [id])
  type        String?
  createdAt   DateTime
  Purchases   Purchases? @relation(fields: [purchasesId], references: [id])
  purchasesId String?    @db.ObjectId
  Expenses    Expenses?  @relation(fields: [expensesId], references: [id])
  expensesId  String?    @db.ObjectId

  @@map("finance")
}

// ------------------------------------------- INVENTORY SUB MODELS START----------------------------------------------------

model AllProducts {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  itemName         String?
  defaultUnit      String?
  hsnCode          String?
  tax              String?
  category         String?
  description      String?
  minStock         Int?
  maxStock         Int?
  distributors     String?
  quantity         Int?
  code             String?
  batchNumber      String?
  costPrice        Int?
  location         Location    @default(NONE)
  providers        String[]
  totalCost        Int?
  costPerItem      Int?
  profitMargin     String?
  expiry           DateTime?
  sellingPrice     Int?
  date             DateTime?
  balanceDue       Boolean?
  Items            Items[]
  inventoryEntries Inventory[]

  @@map("allProducts")
}

model AllServices {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  sacCode          String?
  description      String?
  sellingPrice     String?
  tax              String?
  category         String?
  quantity         Int?
  providers        String[]
  linkProducts     String[]
  serviceCost      Int?
  serviceCharge    Int?
  inventoryEntries Inventory[]

  @@map("allServices")
}

//------------------------------------------------INVENTORY SUB MODELS END---------------------------------------------------

//-------------------------------------------FINANCE SUB MODELS START--------------------------------------------------
model Sales {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  customer        String
  date            DateTime
  notes           String
  subTotal        Int
  invoiceNo       Int
  dueDate         DateTime
  shipping        Int
  adjustment      Int
  totalCost       Int
  overallDiscount Int
  totalQty        Int
  status          String
  type            String?
  item            Items[]
  financeEntries  Finance[]

  @@map("sales")
}

model Purchases {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  distributor          String
  date                 DateTime
  dueDate              DateTime
  returnLastDate       DateTime?
  invoiceNo            String
  purchaseOrderNumber  String?
  distributorInvoiceNo String?
  grnNo                String
  notes                String
  shipping             Int
  adjustment           Int
  totalCost            Int
  totalQty             Int
  status               String
  type                 String?
  item                 Items[]
  financeEntries       Finance[]

  @@map("purchases")
}

model Expenses {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  party           String
  date            DateTime
  invoiceNo       String?
  subTotal        Int
  overallDiscount Int
  totalCost       Int?
  totalQty        Int?
  startedOn       DateTime?
  recurringType   String? // this could be either 'week', 'month' or 'year'
  recurringEnd    String?
  dueDate         String
  notes           String
  status          String
  type            String? // this is the params passed in our url telling if the expense is recurring or non-recurring.
  item            Items[]
  financeEntries  Finance[]

  @@map("expenses")
}

model Transactions {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  partyName     String?
  subject       String?
  invoiceLink   String?
  receiptNo     String?
  date          DateTime?
  amountPaid    Int
  mode          String?
  moneyChange   String?
  invoiceSource String?
}

model Items {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  taxPercent    Int
  taxAmount     Int
  totalAmount   Int
  reasons       String?
  category      String?
  quantity      Int?
  name          String?
  allProductsId String?      @db.ObjectId
  allProducts   AllProducts? @relation(fields: [allProductsId], references: [id])
  salesId       String?      @db.ObjectId
  sale          Sales?       @relation(fields: [salesId], references: [id])
  Purchases     Purchases?   @relation(fields: [purchasesId], references: [id])
  purchasesId   String?      @db.ObjectId
  Expenses      Expenses?    @relation(fields: [expensesId], references: [id])
  expensesId    String?      @db.ObjectId

  @@map("items")
}

//------------------------------------------------------FINANCE SUB MODELS END--------------------------------------------------
//-------------------------------------------------------DATABASE SUB MODELS START --------------------------------------------//

model Clients {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  clientName String?
  email      String?
  contact    String?
  address    String?
  city       String?
  pinCode    String?
  patients   Patients[]

  @@map("client")
}

model Patients {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  patientName String?
  clientId    String?   @db.ObjectId
  species     String?
  breed       String?
  dateOfBirth DateTime?
  age         Int?
  gender      String?
  isInpatient Boolean?
  clients     Clients?  @relation(fields: [clientId], references: [id])

  @@map("patient")
}
